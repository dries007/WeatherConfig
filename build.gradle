buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT"
    }
}

import groovy.json.JsonBuilder
import groovy.json.JsonOutput
import groovy.json.JsonSlurper

apply plugin: "net.minecraftforge.gradle.forge"

version = modVersion
group = modGroup
archivesBaseName = modBaseName

minecraft {
    version = project.forgeVersion
    runDir = "run"

    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = project.mcpVersion
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

repositories {
    mavenCentral()
}

dependencies {
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"

        // replace version and mcversion
        expand "version": project.version, "mcversion": project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }

    doLast {
        def updateFile = new File(project.archivesBaseName + '.json')
        def json;
        if (updateFile.exists()) {
            json = new JsonSlurper().parseText(updateFile.getText())
        }
        else {
            def builder = new JsonBuilder()
            json = builder(
                    homepage: "https://github.com/" + project.githubOrg + "/" + project.archivesBaseName,
                    promos: new HashMap<>()
            )
        }
        def outStream = new ByteArrayOutputStream()
        def result = exec {
            executable = 'git'
            args = [ 'log', '-n', '1', "--format='%B'"]
            standardOutput = outStream
        }
        def fullLog = outStream.toString().replaceAll("^\\s*'\\s*|\\s*'\\s*\$", "").replaceAll("[\\r\\n]+", "\n")

        json['promos'][project.minecraft.version + '-latest'] = project.version
        json['promos'][project.minecraft.version + '-recomended'] = project.version
        if (!json.containsKey(project.minecraft.version)) json.put(project.minecraft.version, new HashMap<>())
        def version = json[project.minecraft.version]
        version.put(project.version, fullLog)
        updateFile.write JsonOutput.prettyPrint(JsonOutput.toJson(json))
    }
}

sourceJar {
    classifier "src"
    appendix = project.minecraft.version
    manifest {
        attributes 'FMLCorePluginContainsFMLMod': 'true', 'FMLCorePlugin': 'net.dries007.weatherconfig.asm.WeatherConfigCoreMod'
    }
}

jar {
    appendix = project.minecraft.version
    manifest {
        attributes 'FMLCorePluginContainsFMLMod': 'true', 'FMLCorePlugin': 'net.dries007.weatherconfig.asm.WeatherConfigCoreMod'

    }
}
